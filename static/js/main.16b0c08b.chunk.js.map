{"version":3,"sources":["Header.js","TodoList.js","Items.js","App.js","serviceWorker.js","index.js"],"names":["Header","handleSubmit","props","submit","handleChange","e","change","target","value","Grid","container","spacing","alignItems","item","Icon","TextField","id","label","this","onChange","htmlFor","Button","variant","color","component","onClick","React","Component","useStyles","width","maxWidth","TodoList","handleUpdate","updateChecked","completed","handleDelete","deleteTask","List","style","ListItem","key","dense","button","ListItemIcon","Checkbox","edge","checked","inputProps","task","ListItemText","styling","primary","ListItemSecondaryAction","IconButton","aria-label","items","textDecoration","position","left","top","transform","backgroundColor","border","App","setState","prev","map","elem","i","Object","assign","drawLine","state","splice","replace","tasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.16b0c08b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default class Header extends React.Component {\r\n  handleSubmit = () => {\r\n    this.props.submit();\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.props.change(e.target.value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Grid container spacing={1} alignItems=\"flex-end\">\r\n          <Grid item>\r\n            <Icon>create</Icon>\r\n          </Grid>\r\n          <Grid item>\r\n            <TextField\r\n              id=\"input-with-icon-grid\"\r\n              label=\"Write your task here\"\r\n              value={this.props.value}\r\n              onChange={this.handleChange}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <label htmlFor=\"contained-button-file\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                onClick={this.handleSubmit}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </label>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Icon from \"@material-ui/core/Icon\";\r\n\r\nconst useStyles = {\r\n  width: \"100%\",\r\n  maxWidth: \"360\"\r\n};\r\n\r\nexport default class TodoList extends React.Component {\r\n  handleUpdate = () => {\r\n    this.props.updateChecked(this.props.completed, this.props.id);\r\n  };\r\n\r\n  handleDelete = () => {\r\n    this.props.deleteTask(this.props.id);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <List style={useStyles}>\r\n        <ListItem key={this.props.id} dense button>\r\n          <ListItemIcon>\r\n            <Checkbox\r\n              edge=\"start\"\r\n              checked={this.props.completed}\r\n              onChange={this.handleUpdate}\r\n              inputProps={{\r\n                \"aria-labelledby\": `checkbox-list-label-${this.props.task}`\r\n              }}\r\n            />\r\n          </ListItemIcon>\r\n          <ListItemText\r\n            style={this.props.styling}\r\n            id={`checkbox-list-label-${this.props.task}`}\r\n            primary={this.props.task}\r\n          />\r\n          <ListItemSecondaryAction>\r\n            <IconButton\r\n              edge=\"end\"\r\n              aria-label=\"comments\"\r\n              onClick={this.handleDelete}\r\n            >\r\n              <Icon>delete</Icon>\r\n            </IconButton>\r\n          </ListItemSecondaryAction>\r\n        </ListItem>\r\n      </List>\r\n    );\r\n  }\r\n}\r\n","const items = [\r\n  {\r\n    task: \"something new 0\",\r\n    completed: false,\r\n    styling: {\r\n      textDecoration: \"none\"\r\n    }\r\n  },\r\n  {\r\n    task: \"something new 1\",\r\n    completed: false,\r\n    styling: {\r\n      textDecoration: \"none\"\r\n    }\r\n  },\r\n  {\r\n    task: \"something new 2\",\r\n    completed: false,\r\n    styling: {\r\n      textDecoration: \"none\"\r\n    }\r\n  },\r\n  {\r\n    task: \"something new 3\",\r\n    completed: false,\r\n    styling: {\r\n      textDecoration: \"none\"\r\n    }\r\n  },\r\n  {\r\n    task: \"something new 4\",\r\n    completed: false,\r\n    styling: {\r\n      textDecoration: \"none\"\r\n    }\r\n  }\r\n];\r\n\r\nexport default items;\r\n","import React from \"react\";\nimport Header from \"./Header\";\nimport TodoList from \"./TodoList\";\nimport items from \"./Items\";\n\nconst styling = {\n  position: \"absolute\",\n  left: \"50%\",\n  top: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  backgroundColor: \"white\",\n  border: \"20px solid white\"\n};\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: items,\n      value: \"\"\n    };\n  }\n\n  updateChecked = (completed, id) => {\n    this.setState(prev => ({\n      items: prev.items.map((elem, i) => {\n        return i === id\n          ? Object.assign(elem, { completed: !elem.completed })\n          : elem;\n      })\n    }));\n\n    this.drawLine(!completed, id);\n  };\n\n  drawLine = (completed, id) => {\n    this.setState(prev => ({\n      items: prev.items.map((elem, i) => {\n        return i === id\n          ? Object.assign(elem, {\n              styling: {\n                textDecoration: completed ? \"line-through\" : \"none\"\n              }\n            })\n          : elem;\n      })\n    }));\n  };\n\n  deleteTask = id => {\n    this.state.items.splice(id, 1);\n    this.setState(prev => ({\n      items: prev.items\n    }));\n  };\n\n  submit = () => {\n    if (this.state.value) {\n      this.setState(state => ({\n        items: [\n          ...state.items,\n          {\n            task: state.value,\n            completed: false,\n            styling: {\n              textDecoration: \"none\"\n            }\n          }\n        ],\n        value: \"\"\n      }));\n    }\n  };\n\n  change = value => {\n    this.setState(state => ({\n      value: state.value.replace(state.value, value)\n    }));\n  };\n\n  render() {\n    const tasks = this.state.items.map((elem, i) => (\n      <TodoList\n        items={items}\n        task={elem.task}\n        key={i}\n        completed={elem.completed}\n        id={i}\n        styling={elem.styling}\n        deleteTask={this.deleteTask}\n        updateChecked={this.updateChecked}\n      />\n    ));\n    return (\n      <div style={styling}>\n        <Header\n          items={this.state.items}\n          value={this.state.value}\n          change={this.change}\n          submit={this.submit}\n        />\n        {tasks}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}